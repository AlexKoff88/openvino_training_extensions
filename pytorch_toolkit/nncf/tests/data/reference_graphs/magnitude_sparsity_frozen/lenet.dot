strict digraph  {
"6 LeNet/RELU" [id=6, scope=LeNet, type=RELU];
"8 LeNet/view" [id=8, scope=LeNet, type=view];
"15 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" [id=15, scope="LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]", type=apply_binary_mask];
"11 LeNet/RELU" [id=11, scope=LeNet, type=RELU];
"9 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" [id=9, scope="LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]", type=apply_binary_mask];
"4 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" [id=4, scope="LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]", type=apply_binary_mask];
"1 LeNet/NNCFConv2d[conv1]/conv2d" [id=1, scope="LeNet/NNCFConv2d[conv1]", type=conv2d];
"7 LeNet/max_pool2d" [id=7, scope=LeNet, type=max_pool2d];
"12 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" [id=12, scope="LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]", type=apply_binary_mask];
"10 LeNet/NNCFLinear[fc1]/linear" [id=10, scope="LeNet/NNCFLinear[fc1]", type=linear];
"0 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" [id=0, scope="LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]", type=apply_binary_mask];
"3 LeNet/max_pool2d" [id=3, scope=LeNet, type=max_pool2d];
"5 LeNet/NNCFConv2d[conv2]/conv2d" [id=5, scope="LeNet/NNCFConv2d[conv2]", type=conv2d];
"13 LeNet/NNCFLinear[fc2]/linear" [id=13, scope="LeNet/NNCFLinear[fc2]", type=linear];
"14 LeNet/RELU" [id=14, scope=LeNet, type=RELU];
"16 LeNet/NNCFLinear[fc3]/linear" [id=16, scope="LeNet/NNCFLinear[fc3]", type=linear];
"2 LeNet/RELU" [id=2, scope=LeNet, type=RELU];
"6 LeNet/RELU" -> "7 LeNet/max_pool2d";
"8 LeNet/view" -> "10 LeNet/NNCFLinear[fc1]/linear";
"15 LeNet/NNCFLinear[fc3]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" -> "16 LeNet/NNCFLinear[fc3]/linear";
"11 LeNet/RELU" -> "13 LeNet/NNCFLinear[fc2]/linear";
"9 LeNet/NNCFLinear[fc1]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" -> "10 LeNet/NNCFLinear[fc1]/linear";
"4 LeNet/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" -> "5 LeNet/NNCFConv2d[conv2]/conv2d";
"1 LeNet/NNCFConv2d[conv1]/conv2d" -> "2 LeNet/RELU";
"7 LeNet/max_pool2d" -> "8 LeNet/view";
"12 LeNet/NNCFLinear[fc2]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" -> "13 LeNet/NNCFLinear[fc2]/linear";
"10 LeNet/NNCFLinear[fc1]/linear" -> "11 LeNet/RELU";
"0 LeNet/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/MagnitudeSparsifyingWeight[op]/apply_binary_mask" -> "1 LeNet/NNCFConv2d[conv1]/conv2d";
"3 LeNet/max_pool2d" -> "5 LeNet/NNCFConv2d[conv2]/conv2d";
"5 LeNet/NNCFConv2d[conv2]/conv2d" -> "6 LeNet/RELU";
"13 LeNet/NNCFLinear[fc2]/linear" -> "14 LeNet/RELU";
"14 LeNet/RELU" -> "16 LeNet/NNCFLinear[fc3]/linear";
"2 LeNet/RELU" -> "3 LeNet/max_pool2d";
}
